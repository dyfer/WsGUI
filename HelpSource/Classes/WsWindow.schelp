TITLE:: WsWindow
summary:: WebSocket-based GUI for SuperCollider
categories:: GUI>WsGUI, Extensions
related:: Classes/WsWindow, Classes/WsWindowServer, Classes/WsLayout, Classes/WsButton, Classes/WsCheckbox, Classes/WsImage, Classes/WsInput, Classes/WsPopUpMenu, Classes/WsSimpleButton, Classes/WsSlider, Classes/WsStaticText

DESCRIPTION::
code::WsWindow:: is a representation of a single webpage for drawing GUI elements. It can be accessed from a web browser locally and over the network. WsWindow and WsWidgets aims to have an API as close as possible to SC's GUI classes.

WsWindow uses a link::https://nodejs.org/##node.js:: script to serve dynamic webpages. This script is controlled internally by the link::Classes/WsWindowServer:: class.

note::
If using this code over the internet, please be advised that it was not tested for security or reliability with many clients connected at once.
::

note::
The API of code::WsWindow:: has changed after Quark version 0.1.
::


Credits:
This software was developed by Marcin PÄ…czkowski and Michael McCrea with the support of the link::http://dxarts.washington.edu##Center for Digital Arts and Experimental Media (DXARTS):: at the University of Washington.

CLASSMETHODS::


PRIVATE:: classPath
PRIVATE:: setClassVars
PRIVATE:: addToShutdown
PRIVATE:: redirectionAddrFile
PRIVATE:: classDir

METHOD:: new
Starts a new web-based Window to draw GUI elements on.

ARGUMENT:: title
Window's title, used for both title text in the browser's frame/tab, as well as the portion of the address.

note::Please don't use characters that are not filename-safe (like #^/\ etc). Spaces are allowed and will be removed in the window's address.::

ARGUMENT:: wwwPort
Specify the port at which the page will be served.

ARGUMENT:: isDefault
If code::true::, client's browser will be redirected to this window automatically when connecting to link::http://localhost:8000##http://yourIP:wwwPort::. If code::false::, then list of available windows will be presented instead.

ARGUMENT:: suppressPosting
If code::true::, then messages from the websocket server will not post to SC's post window.

returns:: An instance of WsWindow

METHOD:: freeAll
Close/free all open instances of WsWindow (useful in case of accidentally re-running a code block that instantiates new WsWindows). This will also close the node server, if running.


INSTANCEMETHODS::

METHOD:: free
Free this instance of the WsWindow.

METHOD:: close
Same as link::#-free::.

METHOD:: clear
Removes all GUI elements from the WsWindow (but does not close/free it).

METHOD:: background
Set/get the background color.

ARGUMENT:: color
Should be an instance of a code::Color::.

METHOD:: isDefault
Sets or un-sets this WsWindow as default. Also see link::#*new::.

ARGUMENT:: val
code::true:: or code::false::

METHOD:: title
Set/get window title. Also see link::#*new::.
ARGUMENT:: title
New title.

METHOD:: backgroundBlink
If code::freq > 0::, the background will alternate between the two defined colors. To stop alternatting between colors, set code::freq:: to code::0:: or use link::#-background::.



PRIVATE:: wsPort
PRIVATE:: windowID
PRIVATE:: guiObjects
PRIVATE:: clientDict
PRIVATE:: buildLayout
PRIVATE:: oscPath
PRIVATE:: unsetAsDefault
PRIVATE:: copyFiles
PRIVATE:: curWidgetID
PRIVATE:: prUpdateValue
PRIVATE:: prCleanup
PRIVATE:: updateWidget
PRIVATE:: prRemoveObj
PRIVATE:: wsOscPort
PRIVATE:: titleID
PRIVATE:: prGetCurrentIdAndIncrement
PRIVATE:: sendMsgToAll
PRIVATE:: prepareJSONcommandId
PRIVATE:: prRemoveObjFromAll
PRIVATE:: setAsDefault
PRIVATE:: send
PRIVATE:: interpretWsData
PRIVATE:: removeWsClient
PRIVATE:: removeAllWidgets
PRIVATE:: init
PRIVATE:: wwwPath
PRIVATE:: removeWidget
PRIVATE:: prUpdateObjInAllExcept
PRIVATE:: removeSubdirectory
PRIVATE:: namesToIDs
PRIVATE:: updateWsPortInFile
PRIVATE:: getPorts
PRIVATE:: prAddAllObj
PRIVATE:: addWsClient
PRIVATE:: wwwServerStartedFromWsWindow
PRIVATE:: prepareParametersDict
PRIVATE:: wsPid
PRIVATE:: setDefaultRedirectionAddress
PRIVATE:: prPrepareGlobalResponders
PRIVATE:: numClients
PRIVATE:: scSendNetAddr
PRIVATE:: layout
PRIVATE:: startBridge
PRIVATE:: createImageLink
PRIVATE:: prUpdateObj
PRIVATE:: killWS
PRIVATE:: prAddObj
PRIVATE:: sendMsg
PRIVATE:: prAddObjToAll
PRIVATE:: prUpdateObjInAll
PRIVATE:: prepareJSON
PRIVATE:: socketsResponder
PRIVATE:: addSubdirectory
PRIVATE:: prepareStyleString
PRIVATE:: addWidget
PRIVATE:: bodyID

EXAMPLES::

code::
a = WsWindow.new("new title", 8000, true);
//now point a web browser to http://localhost:8000 (or http://yourIP:8000)
"http://localhost:8000".openOS;

NetAddr.myIP; //from NetLib; useful for connecting external clients

//background and title
a.background_(Color.blue);
a.background_(Color.green);
a.backgroundBlink(2, Color.red(0.5), Color.black);
a.title_("different title");

//finishing
a.clear //remove all elements, don't close server (can add new elements)
a.free //close ws server

// Multiple windows

a = WsWindow.new("new title", 8000, false);
o = WsWindow.new("different title", 8000, false); //second window
//now point a web browser to http://localhost:8000 (or http://yourIP:8000)
"http://localhost:8000".openOS; //this will show a list of available windows

a.backgroundColor_(Color.blue); //first window
o.backgroundColor_(Color.green); //second window

a.isDefault_(true);//set default
"http://localhost:8000".openOS; //try again

//free both windows
a.free;
o.free;

//close all windows/servers
WsWindow.freeAll;
::
